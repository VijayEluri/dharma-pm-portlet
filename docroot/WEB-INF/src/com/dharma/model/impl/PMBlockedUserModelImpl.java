/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dharma.model.impl;

import com.dharma.model.PMBlockedUser;
import com.dharma.model.PMBlockedUserModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PMBlockedUser service. Represents a row in the &quot;blocked_user&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dharma.model.PMBlockedUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PMBlockedUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PMBlockedUserImpl
 * @see com.dharma.model.PMBlockedUser
 * @see com.dharma.model.PMBlockedUserModel
 * @generated
 */
public class PMBlockedUserModelImpl extends BaseModelImpl<PMBlockedUser>
	implements PMBlockedUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p m blocked user model instance should use the {@link com.dharma.model.PMBlockedUser} interface instead.
	 */
	public static final String TABLE_NAME = "blocked_user";
	public static final Object[][] TABLE_COLUMNS = {
			{ "blockedUserId", Types.BIGINT },
			{ "ownerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "blockedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table blocked_user (blockedUserId LONG not null primary key,ownerId LONG,userId LONG,blockedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table blocked_user";
	public static final String ORDER_BY_JPQL = " ORDER BY pmBlockedUser.blockedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY blocked_user.blockedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dharma.model.PMBlockedUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dharma.model.PMBlockedUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dharma.model.PMBlockedUser"),
			true);
	public static long OWNERID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dharma.model.PMBlockedUser"));

	public PMBlockedUserModelImpl() {
	}

	public long getPrimaryKey() {
		return _blockedUserId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBlockedUserId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_blockedUserId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PMBlockedUser.class;
	}

	public String getModelClassName() {
		return PMBlockedUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("blockedUserId", getBlockedUserId());
		attributes.put("ownerId", getOwnerId());
		attributes.put("userId", getUserId());
		attributes.put("blockedDate", getBlockedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long blockedUserId = (Long)attributes.get("blockedUserId");

		if (blockedUserId != null) {
			setBlockedUserId(blockedUserId);
		}

		Long ownerId = (Long)attributes.get("ownerId");

		if (ownerId != null) {
			setOwnerId(ownerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date blockedDate = (Date)attributes.get("blockedDate");

		if (blockedDate != null) {
			setBlockedDate(blockedDate);
		}
	}

	public long getBlockedUserId() {
		return _blockedUserId;
	}

	public void setBlockedUserId(long blockedUserId) {
		_blockedUserId = blockedUserId;
	}

	public String getBlockedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getBlockedUserId(), "uuid",
			_blockedUserUuid);
	}

	public void setBlockedUserUuid(String blockedUserUuid) {
		_blockedUserUuid = blockedUserUuid;
	}

	public long getOwnerId() {
		return _ownerId;
	}

	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public Date getBlockedDate() {
		return _blockedDate;
	}

	public void setBlockedDate(Date blockedDate) {
		_columnBitmask = -1L;

		_blockedDate = blockedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PMBlockedUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PMBlockedUser toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PMBlockedUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PMBlockedUserImpl pmBlockedUserImpl = new PMBlockedUserImpl();

		pmBlockedUserImpl.setBlockedUserId(getBlockedUserId());
		pmBlockedUserImpl.setOwnerId(getOwnerId());
		pmBlockedUserImpl.setUserId(getUserId());
		pmBlockedUserImpl.setBlockedDate(getBlockedDate());

		pmBlockedUserImpl.resetOriginalValues();

		return pmBlockedUserImpl;
	}

	public int compareTo(PMBlockedUser pmBlockedUser) {
		int value = 0;

		value = DateUtil.compareTo(getBlockedDate(),
				pmBlockedUser.getBlockedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PMBlockedUser pmBlockedUser = null;

		try {
			pmBlockedUser = (PMBlockedUser)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = pmBlockedUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PMBlockedUserModelImpl pmBlockedUserModelImpl = this;

		pmBlockedUserModelImpl._originalOwnerId = pmBlockedUserModelImpl._ownerId;

		pmBlockedUserModelImpl._setOriginalOwnerId = false;

		pmBlockedUserModelImpl._originalUserId = pmBlockedUserModelImpl._userId;

		pmBlockedUserModelImpl._setOriginalUserId = false;

		pmBlockedUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PMBlockedUser> toCacheModel() {
		PMBlockedUserCacheModel pmBlockedUserCacheModel = new PMBlockedUserCacheModel();

		pmBlockedUserCacheModel.blockedUserId = getBlockedUserId();

		pmBlockedUserCacheModel.ownerId = getOwnerId();

		pmBlockedUserCacheModel.userId = getUserId();

		Date blockedDate = getBlockedDate();

		if (blockedDate != null) {
			pmBlockedUserCacheModel.blockedDate = blockedDate.getTime();
		}
		else {
			pmBlockedUserCacheModel.blockedDate = Long.MIN_VALUE;
		}

		return pmBlockedUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{blockedUserId=");
		sb.append(getBlockedUserId());
		sb.append(", ownerId=");
		sb.append(getOwnerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", blockedDate=");
		sb.append(getBlockedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.dharma.model.PMBlockedUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>blockedUserId</column-name><column-value><![CDATA[");
		sb.append(getBlockedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerId</column-name><column-value><![CDATA[");
		sb.append(getOwnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>blockedDate</column-name><column-value><![CDATA[");
		sb.append(getBlockedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PMBlockedUser.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PMBlockedUser.class
		};
	private long _blockedUserId;
	private String _blockedUserUuid;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _blockedDate;
	private long _columnBitmask;
	private PMBlockedUser _escapedModelProxy;
}