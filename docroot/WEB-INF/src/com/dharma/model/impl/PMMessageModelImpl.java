/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dharma.model.impl;

import com.dharma.model.PMMessage;
import com.dharma.model.PMMessageModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PMMessage service. Represents a row in the &quot;private_message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dharma.model.PMMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PMMessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PMMessageImpl
 * @see com.dharma.model.PMMessage
 * @see com.dharma.model.PMMessageModel
 * @generated
 */
public class PMMessageModelImpl extends BaseModelImpl<PMMessage>
	implements PMMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p m message model instance should use the {@link com.dharma.model.PMMessage} interface instead.
	 */
	public static final String TABLE_NAME = "private_message";
	public static final Object[][] TABLE_COLUMNS = {
			{ "messageId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "body", Types.VARCHAR },
			{ "parentMessageId", Types.BIGINT },
			{ "ownerId", Types.BIGINT },
			{ "ownerName", Types.VARCHAR },
			{ "postedDate", Types.TIMESTAMP },
			{ "recepients", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table private_message (messageId LONG not null primary key,subject VARCHAR(75) null,body TEXT null,parentMessageId LONG,ownerId LONG,ownerName VARCHAR(75) null,postedDate DATE null,recepients VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table private_message";
	public static final String ORDER_BY_JPQL = " ORDER BY pmMessage.postedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY private_message.postedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dharma.model.PMMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dharma.model.PMMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dharma.model.PMMessage"),
			true);
	public static long OWNERID_COLUMN_BITMASK = 1L;
	public static long PARENTMESSAGEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dharma.model.PMMessage"));

	public PMMessageModelImpl() {
	}

	public long getPrimaryKey() {
		return _messageId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMessageId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_messageId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PMMessage.class;
	}

	public String getModelClassName() {
		return PMMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("messageId", getMessageId());
		attributes.put("subject", getSubject());
		attributes.put("body", getBody());
		attributes.put("parentMessageId", getParentMessageId());
		attributes.put("ownerId", getOwnerId());
		attributes.put("ownerName", getOwnerName());
		attributes.put("postedDate", getPostedDate());
		attributes.put("recepients", getRecepients());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long messageId = (Long)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		Long parentMessageId = (Long)attributes.get("parentMessageId");

		if (parentMessageId != null) {
			setParentMessageId(parentMessageId);
		}

		Long ownerId = (Long)attributes.get("ownerId");

		if (ownerId != null) {
			setOwnerId(ownerId);
		}

		String ownerName = (String)attributes.get("ownerName");

		if (ownerName != null) {
			setOwnerName(ownerName);
		}

		Date postedDate = (Date)attributes.get("postedDate");

		if (postedDate != null) {
			setPostedDate(postedDate);
		}

		String recepients = (String)attributes.get("recepients");

		if (recepients != null) {
			setRecepients(recepients);
		}
	}

	public long getMessageId() {
		return _messageId;
	}

	public void setMessageId(long messageId) {
		_messageId = messageId;
	}

	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	public void setSubject(String subject) {
		_subject = subject;
	}

	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	public void setBody(String body) {
		_body = body;
	}

	public long getParentMessageId() {
		return _parentMessageId;
	}

	public void setParentMessageId(long parentMessageId) {
		_columnBitmask |= PARENTMESSAGEID_COLUMN_BITMASK;

		if (!_setOriginalParentMessageId) {
			_setOriginalParentMessageId = true;

			_originalParentMessageId = _parentMessageId;
		}

		_parentMessageId = parentMessageId;
	}

	public long getOriginalParentMessageId() {
		return _originalParentMessageId;
	}

	public long getOwnerId() {
		return _ownerId;
	}

	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	public String getOwnerName() {
		if (_ownerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _ownerName;
		}
	}

	public void setOwnerName(String ownerName) {
		_ownerName = ownerName;
	}

	public Date getPostedDate() {
		return _postedDate;
	}

	public void setPostedDate(Date postedDate) {
		_columnBitmask = -1L;

		_postedDate = postedDate;
	}

	public String getRecepients() {
		if (_recepients == null) {
			return StringPool.BLANK;
		}
		else {
			return _recepients;
		}
	}

	public void setRecepients(String recepients) {
		_recepients = recepients;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PMMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PMMessage toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PMMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PMMessageImpl pmMessageImpl = new PMMessageImpl();

		pmMessageImpl.setMessageId(getMessageId());
		pmMessageImpl.setSubject(getSubject());
		pmMessageImpl.setBody(getBody());
		pmMessageImpl.setParentMessageId(getParentMessageId());
		pmMessageImpl.setOwnerId(getOwnerId());
		pmMessageImpl.setOwnerName(getOwnerName());
		pmMessageImpl.setPostedDate(getPostedDate());
		pmMessageImpl.setRecepients(getRecepients());

		pmMessageImpl.resetOriginalValues();

		return pmMessageImpl;
	}

	public int compareTo(PMMessage pmMessage) {
		int value = 0;

		value = DateUtil.compareTo(getPostedDate(), pmMessage.getPostedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PMMessage pmMessage = null;

		try {
			pmMessage = (PMMessage)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = pmMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PMMessageModelImpl pmMessageModelImpl = this;

		pmMessageModelImpl._originalParentMessageId = pmMessageModelImpl._parentMessageId;

		pmMessageModelImpl._setOriginalParentMessageId = false;

		pmMessageModelImpl._originalOwnerId = pmMessageModelImpl._ownerId;

		pmMessageModelImpl._setOriginalOwnerId = false;

		pmMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PMMessage> toCacheModel() {
		PMMessageCacheModel pmMessageCacheModel = new PMMessageCacheModel();

		pmMessageCacheModel.messageId = getMessageId();

		pmMessageCacheModel.subject = getSubject();

		String subject = pmMessageCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			pmMessageCacheModel.subject = null;
		}

		pmMessageCacheModel.body = getBody();

		String body = pmMessageCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			pmMessageCacheModel.body = null;
		}

		pmMessageCacheModel.parentMessageId = getParentMessageId();

		pmMessageCacheModel.ownerId = getOwnerId();

		pmMessageCacheModel.ownerName = getOwnerName();

		String ownerName = pmMessageCacheModel.ownerName;

		if ((ownerName != null) && (ownerName.length() == 0)) {
			pmMessageCacheModel.ownerName = null;
		}

		Date postedDate = getPostedDate();

		if (postedDate != null) {
			pmMessageCacheModel.postedDate = postedDate.getTime();
		}
		else {
			pmMessageCacheModel.postedDate = Long.MIN_VALUE;
		}

		pmMessageCacheModel.recepients = getRecepients();

		String recepients = pmMessageCacheModel.recepients;

		if ((recepients != null) && (recepients.length() == 0)) {
			pmMessageCacheModel.recepients = null;
		}

		return pmMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{messageId=");
		sb.append(getMessageId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", parentMessageId=");
		sb.append(getParentMessageId());
		sb.append(", ownerId=");
		sb.append(getOwnerId());
		sb.append(", ownerName=");
		sb.append(getOwnerName());
		sb.append(", postedDate=");
		sb.append(getPostedDate());
		sb.append(", recepients=");
		sb.append(getRecepients());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.dharma.model.PMMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentMessageId</column-name><column-value><![CDATA[");
		sb.append(getParentMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerId</column-name><column-value><![CDATA[");
		sb.append(getOwnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerName</column-name><column-value><![CDATA[");
		sb.append(getOwnerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>postedDate</column-name><column-value><![CDATA[");
		sb.append(getPostedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recepients</column-name><column-value><![CDATA[");
		sb.append(getRecepients());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PMMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PMMessage.class
		};
	private long _messageId;
	private String _subject;
	private String _body;
	private long _parentMessageId;
	private long _originalParentMessageId;
	private boolean _setOriginalParentMessageId;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private String _ownerName;
	private Date _postedDate;
	private String _recepients;
	private long _columnBitmask;
	private PMMessage _escapedModelProxy;
}